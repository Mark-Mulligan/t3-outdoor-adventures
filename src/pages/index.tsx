// React
import { useState, useEffect } from 'react';

// Next
import type { NextPage, NextPageContext } from 'next';
import { useRouter } from 'next/router';
import Head from 'next/head';

// Prisma
import { prisma } from '../server/db/client';

// Components
import Table from '../components/Table';
import Pagination from '../components/Pagination';

interface ParkData {
  id: string;
  fullname: string;
  parkcode: string;
  states: string;
  designation: string;
}

interface IProps {
  parks: ParkData[];
}

interface TableColumn<T> {
  field: keyof T;
  headerName: string;
}

const columns: TableColumn<ParkData>[] = [
  { field: 'fullname', headerName: 'Park Name' },
  { field: 'parkcode', headerName: 'Park Code' },
  { field: 'states', headerName: 'State(s)' },
  { field: 'designation', headerName: 'Designation' },
];

const Home: NextPage<IProps> = ({ parks }) => {
  const router = useRouter();

  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const [totalPages, setTotalPages] = useState(47);
  const [totalResults, setTotalResults] = useState(463);
  const [parkResults, setParkResults] = useState<ParkData[]>([]);

  useEffect(() => {
    console.log('router query', router.query);
    const queryPage = router.query.page || '';

    if (queryPage) {
      console.log('this ran');
      setPage(Number(queryPage));
    }
  }, [router.query.page]);

  useEffect(() => {
    const offset = (page - 1) * limit;
    const endIndex = page * limit;
    const results = parks.slice(offset, endIndex);
    setParkResults(results);
    setTotalResults(parks.length);
  }, [page, limit, parks]);

  return (
    <>
      <Head>
        <title>Outdoor Adventures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto">
        <div className="flex flex-wrap -mx-3 mb-2">
          <div className="w-full md:w-1/3 px-3 mb-6 md:mb-0">
            <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" htmlFor="grid-city">
              Park Name
            </label>
            <input
              className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
              id="grid-city"
              type="text"
              placeholder="Albuquerque"
            />
          </div>
          <div className="w-full md:w-1/3 px-3 mb-6 md:mb-0">
            <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" htmlFor="grid-state">
              State
            </label>
            <div className="relative">
              <select
                className="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                id="grid-state"
              >
                <option>New Mexico</option>
                <option>Missouri</option>
                <option>Texas</option>
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                </svg>
              </div>
            </div>
          </div>
          <div className="w-full md:w-1/3 px-3 mb-6 md:mb-0">
            <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" htmlFor="grid-zip">
              Zip
            </label>
            <input
              className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
              id="grid-zip"
              type="text"
              placeholder="90210"
            />
          </div>
        </div>

        <Table<ParkData> rows={parkResults} columns={columns} />
        <Pagination page={page} limit={limit} totalPages={totalPages} totalResults={totalResults} />
      </main>
    </>
  );
};

export default Home;

export async function getStaticProps(context: NextPageContext) {
  try {
    const parks = await prisma.nationalParksData.findMany();

    return {
      props: {
        parks,
      }, // will be passed to the page component as props
    };
  } catch (err) {
    return {
      props: {
        parks: [],
      }, // will be passed to the page component as props
    };
  }
}
