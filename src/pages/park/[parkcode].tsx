// Next
import type { NextPage, NextPageContext } from 'next';
import Head from 'next/head';

// axios
import axios from 'axios';

// UUID
import { v4 as uuidv4 } from 'uuid';

// Components
import ParkInfoSection from '../../components/ParkInfoSection';
import Activities from '../../components/ParkSections/Activities';
import Map from '../../components/Map';
import Contact from '../../components/ParkSections/Contact';

// Custom Types
import { IParkDataResponse, IParkData, IParkHours } from '../../customTypes/parks';

const hoursAccessKeys: { key: keyof IParkHours; label: string }[] = [
  { key: 'monday', label: 'Mon' },
  { key: 'tuesday', label: 'Tue' },
  { key: 'wednesday', label: 'Wed' },
  { key: 'thursday', label: 'Thu' },
  { key: 'friday', label: 'Fri' },
  { key: 'saturday', label: 'Sat' },
  { key: 'sunday', label: 'Sun' },
];

interface IProps {
  parkData: IParkData;
  googleMapsKey: string;
}

const ParkPage: NextPage<IProps> = ({ parkData, googleMapsKey }) => {
  console.log(googleMapsKey);

  return (
    <>
      <Head>
        <title>Outdoor Adventures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container px-4 pt-6 mx-auto text-gray-400">
        <h1 className="text-center mb-4 text-4xl text-white">{parkData.fullName}</h1>

        <ParkInfoSection title="Description">
          <p>{parkData.description}</p>
        </ParkInfoSection>

        <ParkInfoSection title="Entrance Fees">
          <ul>
            {parkData.entranceFees.map((fee) => {
              return (
                <li key={uuidv4()} className="mb-4">
                  <h4 className="text-white">
                    {fee.title} <span className="italic">${fee.cost}</span>
                  </h4>
                  <p>{fee.description}</p>
                </li>
              );
            })}
          </ul>
        </ParkInfoSection>

        <ParkInfoSection title="Operating Hours">
          <ul>
            {parkData.operatingHours.map((hoursData) => {
              return (
                <li key={uuidv4()} className="mb-6">
                  <h3 className="text-white text-2xl mb-2">{hoursData.name}</h3>
                  <p className="mb-2">{hoursData.description}</p>
                  <div className="grid grid-cols-2">
                    <div>
                      <h4 className="text-white mb-2">Standard Hours</h4>
                      <ul>
                        {hoursAccessKeys.map((accessKey) => {
                          return (
                            <li key={uuidv4()} className="flex">
                              <span className="w-14">{accessKey.label}</span>
                              <span>{hoursData.standardHours[accessKey.key]}</span>
                            </li>
                          );
                        })}
                      </ul>
                    </div>
                    <div>
                      <h4 className="text-white bm-2">Holiday Hours</h4>
                      <ul>
                        {hoursData.exceptions.map((exception) => {
                          return (
                            <li key={uuidv4()} className="mb-4">
                              <h4 className="text-gray-300 italic">{exception.name}</h4>
                              <p>
                                {exception.startDate} {exception.endDate && `- ${exception.endDate}`}
                              </p>
                              {JSON.stringify(exception.exceptionHours) !== '{}' && (
                                <ul>
                                  {hoursAccessKeys.map((accessKey) => {
                                    return (
                                      <li className="flex">
                                        <span className="w-14">{accessKey.label}</span>{' '}
                                        <span>{hoursData.standardHours[accessKey.key]}</span>
                                      </li>
                                    );
                                  })}
                                </ul>
                              )}
                            </li>
                          );
                        })}
                      </ul>
                    </div>
                  </div>
                </li>
              );
            })}
          </ul>
        </ParkInfoSection>

        <Activities activities={parkData.activities} />

        <ParkInfoSection title="Location">
          <Map googleMapsKey={googleMapsKey} lat={parseFloat(parkData.latitude)} lng={parseFloat(parkData.longitude)} />
        </ParkInfoSection>

        <Contact contacts={parkData.contacts} url={parkData.url} />
      </main>
    </>
  );
};

export async function getServerSideProps(context: NextPageContext) {
  const parkCode = context.query.parkcode;

  if (typeof parkCode !== 'string') {
    return;
  }

  try {
    const { data } = await axios.get<IParkDataResponse>(
      `https://developer.nps.gov/api/v1/parks?parkCode=${parkCode}&api_key=${process.env.NATIONAL_PARKS_APIKEY}`,
    );

    return {
      props: {
        parkData: data.data[0],
        googleMapsKey: process.env.GOOGLE_MAPS_APIKEY,
      }, // will be passed to the page component as props
    };
  } catch (err) {
    return {
      props: {
        parkData: null,
      }, // will be passed to the page component as props
    };
  }
}

// # const { data } = await axios.get(
//   #   `https://developer.nps.gov/api/v1/parks?parkCode=${parkCode}&api_key=${process.env.NATIONAL_PARKS_APIKEY}`,
//   # );
export default ParkPage;
